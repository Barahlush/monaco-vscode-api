From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 15 Apr 2024 10:52:20 +0200
Subject: [PATCH] fix: move action from service file to contribution

---
 .../browser/gettingStarted.contribution.ts    |  1 +
 .../gettingStartedService._contribution.ts    | 55 +++++++++++++++++++
 .../browser/gettingStartedService.ts          | 49 +----------------
 3 files changed, 58 insertions(+), 47 deletions(-)
 create mode 100644 src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService._contribution.ts

diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts
index c581ac0e4d2..384d28b7362 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts
@@ -30,6 +30,7 @@ import { IExtensionService } from 'vs/workbench/services/extensions/common/exten
 import { StartupPageEditorResolverContribution, StartupPageRunnerContribution } from 'vs/workbench/contrib/welcomeGettingStarted/browser/startupPage';
 import { ExtensionsInput } from 'vs/workbench/contrib/extensions/common/extensionsInput';
 import { Categories } from 'vs/platform/action/common/actionCommonCategories';
+import 'vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService._contribution';
 
 export * as icons from 'vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedIcons';
 
diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService._contribution.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService._contribution.ts
new file mode 100644
index 00000000000..3fc81fe28fc
--- /dev/null
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService._contribution.ts
@@ -0,0 +1,55 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import { localize2 } from 'vs/nls';
+import { Action2, registerAction2 } from 'vs/platform/actions/common/actions';
+import { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
+import { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';
+import { Memento } from 'vs/workbench/common/memento';
+import { hiddenEntriesConfigurationKey, IWalkthroughsService, walkthroughMetadataConfigurationKey } from 'vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService';
+
+registerAction2(class extends Action2 {
+	constructor() {
+		super({
+			id: 'resetGettingStartedProgress',
+			category: localize2('developer', "Developer"),
+			title: localize2('resetWelcomePageWalkthroughProgress', "Reset Welcome Page Walkthrough Progress"),
+			f1: true,
+			metadata: {
+				description: localize2('resetGettingStartedProgressDescription', 'Reset the progress of all Walkthrough steps on the Welcome Page to make them appear as if they are being viewed for the first time, providing a fresh start to the getting started experience.'),
+			}
+		});
+	}
+
+	run(accessor: ServicesAccessor) {
+		const gettingStartedService = accessor.get(IWalkthroughsService);
+		const storageService = accessor.get(IStorageService);
+
+		storageService.store(
+			hiddenEntriesConfigurationKey,
+			JSON.stringify([]),
+			StorageScope.PROFILE,
+			StorageTarget.USER);
+
+		storageService.store(
+			walkthroughMetadataConfigurationKey,
+			JSON.stringify([]),
+			StorageScope.PROFILE,
+			StorageTarget.USER);
+
+		const memento = new Memento('gettingStartedService', accessor.get(IStorageService));
+		const record = memento.getMemento(StorageScope.PROFILE, StorageTarget.USER);
+		for (const key in record) {
+			if (Object.prototype.hasOwnProperty.call(record, key)) {
+				try {
+					gettingStartedService.deprogressStep(key);
+				} catch (e) {
+					console.error(e);
+				}
+			}
+		}
+		memento.saveMemento();
+	}
+});
diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts
index 6d1732f8fc5..21e6975c4c1 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts
@@ -3,11 +3,10 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { createDecorator, IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
+import { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { Emitter, Event } from 'vs/base/common/event';
 import { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';
 import { Memento } from 'vs/workbench/common/memento';
-import { Action2, registerAction2 } from 'vs/platform/actions/common/actions';
 import { ICommandService } from 'vs/platform/commands/common/commands';
 import { ContextKeyExpr, ContextKeyExpression, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';
 import { Disposable } from 'vs/base/common/lifecycle';
@@ -28,7 +27,7 @@ import { InstantiationType, registerSingleton } from 'vs/platform/instantiation/
 import { dirname } from 'vs/base/common/path';
 import { coalesce } from 'vs/base/common/arrays';
 import { IViewsService } from 'vs/workbench/services/views/common/viewsService';
-import { localize, localize2 } from 'vs/nls';
+import { localize } from 'vs/nls';
 import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
 import { checkGlobFileExists } from 'vs/workbench/services/extensions/common/workspaceContains';
 import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
@@ -668,48 +667,4 @@ const convertInternalMediaPathsToBrowserURIs = (path: string | { hc: string; hcL
 	}
 };
 
-registerAction2(class extends Action2 {
-	constructor() {
-		super({
-			id: 'resetGettingStartedProgress',
-			category: localize2('developer', "Developer"),
-			title: localize2('resetWelcomePageWalkthroughProgress', "Reset Welcome Page Walkthrough Progress"),
-			f1: true,
-			metadata: {
-				description: localize2('resetGettingStartedProgressDescription', 'Reset the progress of all Walkthrough steps on the Welcome Page to make them appear as if they are being viewed for the first time, providing a fresh start to the getting started experience.'),
-			}
-		});
-	}
-
-	run(accessor: ServicesAccessor) {
-		const gettingStartedService = accessor.get(IWalkthroughsService);
-		const storageService = accessor.get(IStorageService);
-
-		storageService.store(
-			hiddenEntriesConfigurationKey,
-			JSON.stringify([]),
-			StorageScope.PROFILE,
-			StorageTarget.USER);
-
-		storageService.store(
-			walkthroughMetadataConfigurationKey,
-			JSON.stringify([]),
-			StorageScope.PROFILE,
-			StorageTarget.USER);
-
-		const memento = new Memento('gettingStartedService', accessor.get(IStorageService));
-		const record = memento.getMemento(StorageScope.PROFILE, StorageTarget.USER);
-		for (const key in record) {
-			if (Object.prototype.hasOwnProperty.call(record, key)) {
-				try {
-					gettingStartedService.deprogressStep(key);
-				} catch (e) {
-					console.error(e);
-				}
-			}
-		}
-		memento.saveMemento();
-	}
-});
-
 registerSingleton(IWalkthroughsService, WalkthroughsService, InstantiationType.Delayed);
