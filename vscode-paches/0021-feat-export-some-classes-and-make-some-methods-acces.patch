From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 17:32:31 +0100
Subject: [PATCH] feat: export some classes and make some methods accessible

---
 .../browser/extensionResourceLoaderService.ts        |  2 +-
 .../workbench/api/browser/statusBarExtensionPoint.ts |  2 +-
 src/vs/workbench/browser/layout.ts                   | 10 +++++-----
 src/vs/workbench/browser/workbench.ts                | 12 ++++++------
 .../debug/browser/extensionHostDebugService.ts       |  2 +-
 .../contrib/issue/browser/issueTroubleshoot.ts       |  6 +++---
 .../contrib/logs/common/defaultLogLevels.ts          |  2 +-
 .../dialogs/browser/abstractFileDialogService.ts     |  2 +-
 .../services/dialogs/browser/fileDialogService.ts    |  4 ++--
 .../extensionManagement/browser/extensionBisect.ts   |  2 +-
 .../common/extensionFeaturesManagemetService.ts      |  2 +-
 .../services/extensions/browser/extensionService.ts  |  6 +++---
 .../extensions/browser/extensionUrlHandler.ts        |  2 +-
 .../extensions/browser/webWorkerExtensionHost.ts     |  2 +-
 .../extensions/common/abstractExtensionService.ts    | 10 +++++-----
 .../services/keybinding/browser/keybindingService.ts |  2 +-
 .../languageStatus/common/languageStatusService.ts   |  2 +-
 .../services/localization/browser/localeService.ts   |  2 +-
 .../services/outline/browser/outlineService.ts       |  2 +-
 .../workbench/services/path/browser/pathService.ts   |  2 +-
 .../services/remote/common/remoteExplorerService.ts  |  2 +-
 .../remote/common/remoteExtensionsScanner.ts         |  2 +-
 .../terminal/common/embedderTerminalService.ts       |  2 +-
 .../userDataProfile/common/remoteUserDataProfiles.ts |  2 +-
 .../services/userDataSync/common/userDataSyncUtil.ts |  2 +-
 25 files changed, 43 insertions(+), 43 deletions(-)

diff --git a/src/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts b/src/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts
index fdefc170db0..1d3bc4affc5 100644
--- a/src/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts
+++ b/src/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts
@@ -14,7 +14,7 @@ import { ILogService } from 'vs/platform/log/common/log';
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
 import { AbstractExtensionResourceLoaderService, IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';
 
-class ExtensionResourceLoaderService extends AbstractExtensionResourceLoaderService {
+export class ExtensionResourceLoaderService extends AbstractExtensionResourceLoaderService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
index 99dd3279fe8..b692381eaa2 100644
--- a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
+++ b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
@@ -57,7 +57,7 @@ export interface IExtensionStatusBarItemService {
 }
 
 
-class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
+export class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/browser/layout.ts b/src/vs/workbench/browser/layout.ts
index b8232cb8490..348d4f64426 100644
--- a/src/vs/workbench/browser/layout.ts
+++ b/src/vs/workbench/browser/layout.ts
@@ -52,7 +52,7 @@ import { CustomTitleBarVisibility } from '../../platform/window/common/window';
 
 //#region Layout Implementation
 
-interface ILayoutRuntimeState {
+export interface ILayoutRuntimeState {
 	activeContainerId: number;
 	mainWindowFullscreen: boolean;
 	readonly maximized: Set<number>;
@@ -66,12 +66,12 @@ interface ILayoutRuntimeState {
 	};
 }
 
-interface IEditorToOpen {
+export interface IEditorToOpen {
 	readonly editor: IUntypedEditorInput;
 	readonly viewColumn?: number;
 }
 
-interface ILayoutInitializationState {
+export interface ILayoutInitializationState {
 	readonly views: {
 		readonly defaults: string[] | undefined;
 		readonly containerToRestore: {
@@ -105,11 +105,11 @@ enum LayoutClasses {
 	WINDOW_BORDER = 'border'
 }
 
-interface IPathToOpen extends IPath {
+export interface IPathToOpen extends IPath {
 	readonly viewColumn?: number;
 }
 
-interface IInitialEditorsState {
+export interface IInitialEditorsState {
 	readonly filesToOpenOrCreate?: IPathToOpen[];
 	readonly filesToDiff?: IPathToOpen[];
 	readonly filesToMerge?: IPathToOpen[];
diff --git a/src/vs/workbench/browser/workbench.ts b/src/vs/workbench/browser/workbench.ts
index b0688133537..b0f76f8d08d 100644
--- a/src/vs/workbench/browser/workbench.ts
+++ b/src/vs/workbench/browser/workbench.ts
@@ -81,7 +81,7 @@ export class Workbench extends Layout {
 		this.registerErrorHandler(logService);
 	}
 
-	private registerErrorHandler(logService: ILogService): void {
+	protected registerErrorHandler(logService: ILogService): void {
 
 		// Listen on unhandled rejection events
 		// Note: intentionally not registered as disposable to handle
@@ -201,7 +201,7 @@ export class Workbench extends Layout {
 		}
 	}
 
-	private initServices(serviceCollection: ServiceCollection): IInstantiationService {
+	protected initServices(serviceCollection: ServiceCollection): IInstantiationService {
 
 		// Layout Service
 		serviceCollection.set(IWorkbenchLayoutService, this);
@@ -240,7 +240,7 @@ export class Workbench extends Layout {
 		return instantiationService;
 	}
 
-	private registerListeners(lifecycleService: ILifecycleService, storageService: IStorageService, configurationService: IConfigurationService, hostService: IHostService, dialogService: IDialogService): void {
+	protected registerListeners(lifecycleService: ILifecycleService, storageService: IStorageService, configurationService: IConfigurationService, hostService: IHostService, dialogService: IDialogService): void {
 
 		// Configuration changes
 		this._register(configurationService.onDidChangeConfiguration(e => this.updateFontAliasing(e, configurationService)));
@@ -329,7 +329,7 @@ export class Workbench extends Layout {
 		}
 	}
 
-	private renderWorkbench(instantiationService: IInstantiationService, notificationService: NotificationService, storageService: IStorageService, configurationService: IConfigurationService): void {
+	protected renderWorkbench(instantiationService: IInstantiationService, notificationService: NotificationService, storageService: IStorageService, configurationService: IConfigurationService): void {
 
 		// ARIA & Signals
 		setARIAContainer(this.mainContainer);
@@ -396,7 +396,7 @@ export class Workbench extends Layout {
 		return part;
 	}
 
-	private createNotificationsHandlers(instantiationService: IInstantiationService, notificationService: NotificationService): void {
+	protected createNotificationsHandlers(instantiationService: IInstantiationService, notificationService: NotificationService): void {
 
 		// Instantiate Notification components
 		const notificationsCenter = this._register(instantiationService.createInstance(NotificationsCenter, this.mainContainer, notificationService.model));
@@ -427,7 +427,7 @@ export class Workbench extends Layout {
 		});
 	}
 
-	private restore(lifecycleService: ILifecycleService): void {
+	protected restore(lifecycleService: ILifecycleService): void {
 
 		// Ask each part to restore
 		try {
diff --git a/src/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts b/src/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts
index 08449bd2cd7..f82ac191725 100644
--- a/src/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts
+++ b/src/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts
@@ -19,7 +19,7 @@ import { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/envir
 import { IHostService } from 'vs/workbench/services/host/browser/host';
 import { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';
 
-class BrowserExtensionHostDebugService extends ExtensionHostDebugChannelClient implements IExtensionHostDebugService {
+export class BrowserExtensionHostDebugService extends ExtensionHostDebugChannelClient implements IExtensionHostDebugService {
 
 	private static readonly LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY = 'debug.lastExtensionDevelopmentWorkspace';
 
diff --git a/src/vs/workbench/contrib/issue/browser/issueTroubleshoot.ts b/src/vs/workbench/contrib/issue/browser/issueTroubleshoot.ts
index f9f3104f8b3..8d3eb0c0e4e 100644
--- a/src/vs/workbench/contrib/issue/browser/issueTroubleshoot.ts
+++ b/src/vs/workbench/contrib/issue/browser/issueTroubleshoot.ts
@@ -30,9 +30,9 @@ import { URI } from 'vs/base/common/uri';
 import { RemoteNameContext } from 'vs/workbench/common/contextkeys';
 import { IsWebContext } from 'vs/platform/contextkey/common/contextkeys';
 
-const ITroubleshootIssueService = createDecorator<ITroubleshootIssueService>('ITroubleshootIssueService');
+export const ITroubleshootIssueService = createDecorator<ITroubleshootIssueService>('ITroubleshootIssueService');
 
-interface ITroubleshootIssueService {
+export interface ITroubleshootIssueService {
 	_serviceBrand: undefined;
 	isActive(): boolean;
 	start(): Promise<void>;
@@ -72,7 +72,7 @@ class TroubleShootState {
 	) { }
 }
 
-class TroubleshootIssueService extends Disposable implements ITroubleshootIssueService {
+export class TroubleshootIssueService extends Disposable implements ITroubleshootIssueService {
 
 	readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/contrib/logs/common/defaultLogLevels.ts b/src/vs/workbench/contrib/logs/common/defaultLogLevels.ts
index 522b64a8cd6..b43c170bf2e 100644
--- a/src/vs/workbench/contrib/logs/common/defaultLogLevels.ts
+++ b/src/vs/workbench/contrib/logs/common/defaultLogLevels.ts
@@ -42,7 +42,7 @@ export interface IDefaultLogLevelsService {
 	migrateLogLevels(): void;
 }
 
-class DefaultLogLevelsService extends Disposable implements IDefaultLogLevelsService {
+export class DefaultLogLevelsService extends Disposable implements IDefaultLogLevelsService {
 
 	_serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts b/src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts
index c6a2df09c76..88399f0d728 100644
--- a/src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts
+++ b/src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts
@@ -54,7 +54,7 @@ export abstract class AbstractFileDialogService implements IFileDialogService {
 		@ICommandService protected readonly commandService: ICommandService,
 		@IEditorService protected readonly editorService: IEditorService,
 		@ICodeEditorService protected readonly codeEditorService: ICodeEditorService,
-		@ILogService private readonly logService: ILogService
+		@ILogService protected readonly logService: ILogService
 	) { }
 
 	async defaultFilePath(schemeFilter = this.getSchemeFilterForWindow(), authorityFilter = this.getAuthorityFilterForWindow()): Promise<URI> {
diff --git a/src/vs/workbench/services/dialogs/browser/fileDialogService.ts b/src/vs/workbench/services/dialogs/browser/fileDialogService.ts
index de6a4ad8227..2b0ac26789f 100644
--- a/src/vs/workbench/services/dialogs/browser/fileDialogService.ts
+++ b/src/vs/workbench/services/dialogs/browser/fileDialogService.ts
@@ -24,7 +24,7 @@ import { EmbeddedCodeEditorWidget } from 'vs/editor/browser/widget/codeEditor/em
 export class FileDialogService extends AbstractFileDialogService implements IFileDialogService {
 
 	@memoize
-	private get fileSystemProvider(): HTMLFileSystemProvider {
+	protected get fileSystemProvider(): HTMLFileSystemProvider {
 		return this.fileService.getProvider(Schemas.file) as HTMLFileSystemProvider;
 	}
 
@@ -271,7 +271,7 @@ export class FileDialogService extends AbstractFileDialogService implements IFil
 		return undefined;
 	}
 
-	private shouldUseSimplified(scheme: string): boolean {
+	protected shouldUseSimplified(scheme: string): boolean {
 		return ![Schemas.file, Schemas.vscodeUserData, Schemas.tmp].includes(scheme);
 	}
 }
diff --git a/src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts b/src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts
index d339e68cfe8..201e6372cde 100644
--- a/src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts
+++ b/src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts
@@ -64,7 +64,7 @@ class BisectState {
 	) { }
 }
 
-class ExtensionBisectService implements IExtensionBisectService {
+export class ExtensionBisectService implements IExtensionBisectService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/extensionManagement/common/extensionFeaturesManagemetService.ts b/src/vs/workbench/services/extensionManagement/common/extensionFeaturesManagemetService.ts
index 0e60b30cd13..a8fef74dbc4 100644
--- a/src/vs/workbench/services/extensionManagement/common/extensionFeaturesManagemetService.ts
+++ b/src/vs/workbench/services/extensionManagement/common/extensionFeaturesManagemetService.ts
@@ -27,7 +27,7 @@ interface IExtensionFeatureState {
 
 const FEATURES_STATE_KEY = 'extension.features.state';
 
-class ExtensionFeaturesManagementService extends Disposable implements IExtensionFeaturesManagementService {
+export class ExtensionFeaturesManagementService extends Disposable implements IExtensionFeaturesManagementService {
 	declare readonly _serviceBrand: undefined;
 
 	private readonly _onDidChangeEnablement = this._register(new Emitter<{ extension: ExtensionIdentifier; featureId: string; enabled: boolean }>());
diff --git a/src/vs/workbench/services/extensions/browser/extensionService.ts b/src/vs/workbench/services/extensions/browser/extensionService.ts
index a5596ccb66c..678e10e3be2 100644
--- a/src/vs/workbench/services/extensions/browser/extensionService.ts
+++ b/src/vs/workbench/services/extensions/browser/extensionService.ts
@@ -117,7 +117,7 @@ export class ExtensionService extends AbstractExtensionService implements IExten
 		this._register(this._fileService.registerProvider(Schemas.https, provider));
 	}
 
-	private async _scanWebExtensions(): Promise<IExtensionDescription[]> {
+	protected async _scanWebExtensions(): Promise<IExtensionDescription[]> {
 		const system: IExtensionDescription[] = [], user: IExtensionDescription[] = [], development: IExtensionDescription[] = [];
 		try {
 			await Promise.all([
@@ -200,7 +200,7 @@ export class ExtensionService extends AbstractExtensionService implements IExten
 	}
 }
 
-class BrowserExtensionHostFactory implements IExtensionHostFactory {
+export class BrowserExtensionHostFactory implements IExtensionHostFactory {
 
 	constructor(
 		private readonly _extensionsProposedApi: ExtensionsProposedApi,
@@ -236,7 +236,7 @@ class BrowserExtensionHostFactory implements IExtensionHostFactory {
 		}
 	}
 
-	private _createLocalExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: ExtensionRunningLocation, isInitialStart: boolean): IWebWorkerExtensionHostDataProvider {
+	protected _createLocalExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: ExtensionRunningLocation, isInitialStart: boolean): IWebWorkerExtensionHostDataProvider {
 		return {
 			getInitData: async (): Promise<IWebWorkerExtensionHostInitData> => {
 				if (isInitialStart) {
diff --git a/src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts b/src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts
index 696f8227e6e..48c0e3bc2d4 100644
--- a/src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts
+++ b/src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts
@@ -108,7 +108,7 @@ type ExtensionUrlReloadHandlerClassification = {
  *
  * It also makes sure the user confirms opening URLs directed towards extensions.
  */
-class ExtensionUrlHandler implements IExtensionUrlHandler, IURLHandler {
+export class ExtensionUrlHandler implements IExtensionUrlHandler, IURLHandler {
 
 	readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
index 0c8d2e27317..972bc7fe243 100644
--- a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
+++ b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
@@ -76,7 +76,7 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 		this._extensionHostLogsLocation = joinPath(this._environmentService.extHostLogsPath, 'webWorker');
 	}
 
-	private async _getWebWorkerExtensionHostIframeSrc(): Promise<string> {
+	protected async _getWebWorkerExtensionHostIframeSrc(): Promise<string> {
 		const suffixSearchParams = new URLSearchParams();
 		if (this._environmentService.debugExtensionHost && this._environmentService.debugRenderer) {
 			suffixSearchParams.set('debugged', '1');
diff --git a/src/vs/workbench/services/extensions/common/abstractExtensionService.ts b/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
index 731a48bf5b0..46963ffafc7 100644
--- a/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
+++ b/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
@@ -95,9 +95,9 @@ export abstract class AbstractExtensionService extends Disposable implements IEx
 	private _resolveAuthorityAttempt: number = 0;
 
 	constructor(
-		private readonly _extensionsProposedApi: ExtensionsProposedApi,
-		private readonly _extensionHostFactory: IExtensionHostFactory,
-		private readonly _extensionHostKindPicker: IExtensionHostKindPicker,
+		protected readonly _extensionsProposedApi: ExtensionsProposedApi,
+		protected readonly _extensionHostFactory: IExtensionHostFactory,
+		protected readonly _extensionHostKindPicker: IExtensionHostKindPicker,
 		@IInstantiationService protected readonly _instantiationService: IInstantiationService,
 		@INotificationService protected readonly _notificationService: INotificationService,
 		@IWorkbenchEnvironmentService protected readonly _environmentService: IWorkbenchEnvironmentService,
@@ -212,7 +212,7 @@ export abstract class AbstractExtensionService extends Disposable implements IEx
 
 	//#region deltaExtensions
 
-	private async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {
+	protected async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {
 		this._deltaExtensionsQueue.push(item);
 		if (this._inHandleDeltaExtensions) {
 			// Let the current item finish, the new one will be picked up
@@ -1264,7 +1264,7 @@ export interface IExtensionHostFactory {
 	createExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null;
 }
 
-class DeltaExtensionsQueueItem {
+export class DeltaExtensionsQueueItem {
 	constructor(
 		public readonly toAdd: IExtension[],
 		public readonly toRemove: string[] | IExtension[]
diff --git a/src/vs/workbench/services/keybinding/browser/keybindingService.ts b/src/vs/workbench/services/keybinding/browser/keybindingService.ts
index 3c98bf9aec0..3ab26183771 100644
--- a/src/vs/workbench/services/keybinding/browser/keybindingService.ts
+++ b/src/vs/workbench/services/keybinding/browser/keybindingService.ts
@@ -423,7 +423,7 @@ export class WorkbenchKeybindingService extends AbstractKeybindingService {
 		return this.userKeybindings.keybindings.length;
 	}
 
-	private updateResolver(): void {
+	protected updateResolver(): void {
 		this._cachedResolver = null;
 		this._onDidUpdateKeybindings.fire();
 	}
diff --git a/src/vs/workbench/services/languageStatus/common/languageStatusService.ts b/src/vs/workbench/services/languageStatus/common/languageStatusService.ts
index e10d2a3ef1e..6dd88102a64 100644
--- a/src/vs/workbench/services/languageStatus/common/languageStatusService.ts
+++ b/src/vs/workbench/services/languageStatus/common/languageStatusService.ts
@@ -47,7 +47,7 @@ export interface ILanguageStatusService {
 }
 
 
-class LanguageStatusServiceImpl implements ILanguageStatusService {
+export class LanguageStatusServiceImpl implements ILanguageStatusService {
 
 	declare _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/localization/browser/localeService.ts b/src/vs/workbench/services/localization/browser/localeService.ts
index 0d9c51c72cf..ec2aeac2149 100644
--- a/src/vs/workbench/services/localization/browser/localeService.ts
+++ b/src/vs/workbench/services/localization/browser/localeService.ts
@@ -74,7 +74,7 @@ export class WebLocaleService implements ILocaleService {
 	}
 }
 
-class WebActiveLanguagePackService implements IActiveLanguagePackService {
+export class WebActiveLanguagePackService implements IActiveLanguagePackService {
 	_serviceBrand: undefined;
 
 	constructor(
diff --git a/src/vs/workbench/services/outline/browser/outlineService.ts b/src/vs/workbench/services/outline/browser/outlineService.ts
index f4707432371..7c5cdde39cc 100644
--- a/src/vs/workbench/services/outline/browser/outlineService.ts
+++ b/src/vs/workbench/services/outline/browser/outlineService.ts
@@ -11,7 +11,7 @@ import { IEditorPane } from 'vs/workbench/common/editor';
 import { IOutline, IOutlineCreator, IOutlineService, OutlineTarget } from 'vs/workbench/services/outline/browser/outline';
 import { Event, Emitter } from 'vs/base/common/event';
 
-class OutlineService implements IOutlineService {
+export class OutlineService implements IOutlineService {
 
 	declare _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/path/browser/pathService.ts b/src/vs/workbench/services/path/browser/pathService.ts
index 664884d60ba..2457dbaa576 100644
--- a/src/vs/workbench/services/path/browser/pathService.ts
+++ b/src/vs/workbench/services/path/browser/pathService.ts
@@ -28,7 +28,7 @@ export class BrowserPathService extends AbstractPathService {
 	}
 }
 
-function guessLocalUserHome(environmentService: IWorkbenchEnvironmentService, contextService: IWorkspaceContextService): URI {
+export function guessLocalUserHome(environmentService: IWorkbenchEnvironmentService, contextService: IWorkspaceContextService): URI {
 
 	// In web we do not really have the concept of a "local" user home
 	// but we still require it in many places as a fallback. As such,
diff --git a/src/vs/workbench/services/remote/common/remoteExplorerService.ts b/src/vs/workbench/services/remote/common/remoteExplorerService.ts
index be889244846..875a9072cf0 100644
--- a/src/vs/workbench/services/remote/common/remoteExplorerService.ts
+++ b/src/vs/workbench/services/remote/common/remoteExplorerService.ts
@@ -139,7 +139,7 @@ export interface IRemoteExplorerService {
 	readonly namedProcesses: Map<number, string>;
 }
 
-class RemoteExplorerService implements IRemoteExplorerService {
+export class RemoteExplorerService implements IRemoteExplorerService {
 	public _serviceBrand: undefined;
 	private _targetType: string[] = [];
 	private readonly _onDidChangeTargetType: Emitter<string[]> = new Emitter<string[]>();
diff --git a/src/vs/workbench/services/remote/common/remoteExtensionsScanner.ts b/src/vs/workbench/services/remote/common/remoteExtensionsScanner.ts
index ce9954eb03d..477eceb0abd 100644
--- a/src/vs/workbench/services/remote/common/remoteExtensionsScanner.ts
+++ b/src/vs/workbench/services/remote/common/remoteExtensionsScanner.ts
@@ -18,7 +18,7 @@ import { IActiveLanguagePackService } from 'vs/workbench/services/localization/c
 import { IWorkbenchExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
 import { Mutable } from 'vs/base/common/types';
 
-class RemoteExtensionsScannerService implements IRemoteExtensionsScannerService {
+export class RemoteExtensionsScannerService implements IRemoteExtensionsScannerService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/terminal/common/embedderTerminalService.ts b/src/vs/workbench/services/terminal/common/embedderTerminalService.ts
index 5e322af7a0f..07b4abdd636 100644
--- a/src/vs/workbench/services/terminal/common/embedderTerminalService.ts
+++ b/src/vs/workbench/services/terminal/common/embedderTerminalService.ts
@@ -52,7 +52,7 @@ export interface IEmbedderTerminalPty {
 	//   setDimensions?(dimensions: TerminalDimensions): void;
 }
 
-class EmbedderTerminalService implements IEmbedderTerminalService {
+export class EmbedderTerminalService implements IEmbedderTerminalService {
 	declare _serviceBrand: undefined;
 
 	private readonly _onDidCreateTerminal = new Emitter<IShellLaunchConfig>();
diff --git a/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts b/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts
index d3ef612836b..0d0fb8d2862 100644
--- a/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts
+++ b/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts
@@ -25,7 +25,7 @@ export interface IRemoteUserDataProfilesService {
 	getRemoteProfile(localProfile: IUserDataProfile): Promise<IUserDataProfile>;
 }
 
-class RemoteUserDataProfilesService extends Disposable implements IRemoteUserDataProfilesService {
+export class RemoteUserDataProfilesService extends Disposable implements IRemoteUserDataProfilesService {
 
 	readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/userDataSync/common/userDataSyncUtil.ts b/src/vs/workbench/services/userDataSync/common/userDataSyncUtil.ts
index 45329df40c4..84119b7c042 100644
--- a/src/vs/workbench/services/userDataSync/common/userDataSyncUtil.ts
+++ b/src/vs/workbench/services/userDataSync/common/userDataSyncUtil.ts
@@ -12,7 +12,7 @@ import { URI } from 'vs/base/common/uri';
 import { ITextModelService } from 'vs/editor/common/services/resolverService';
 import { ITextResourcePropertiesService, ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';
 
-class UserDataSyncUtilService implements IUserDataSyncUtilService {
+export class UserDataSyncUtilService implements IUserDataSyncUtilService {
 
 	declare readonly _serviceBrand: undefined;
 
