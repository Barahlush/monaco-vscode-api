From 2605674d58bdbb152525e4eda26944b41ce15e90 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 18:24:35 +0100
Subject: [PATCH 53/58] fix: only use open model

---
 .../browser/languageDetectionSimpleWorker.ts  | 61 +------------------
 1 file changed, 3 insertions(+), 58 deletions(-)

diff --git a/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts b/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts
index f967fc38127..4da1da8f591 100644
--- a/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts
+++ b/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts
@@ -3,14 +3,12 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import type { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';
+import { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';
 import { StopWatch } from 'vs/base/common/stopwatch';
 import { IRequestHandler } from 'vs/base/common/worker/simpleWorker';
 import { EditorSimpleWorker } from 'vs/editor/common/services/editorSimpleWorker';
 import { IEditorWorkerHost } from 'vs/editor/common/services/editorWorkerHost';
 
-type RegexpModel = { detect: (inp: string, langBiases: Record<string, number>, supportedLangs?: string[]) => string | undefined };
-
 /**
  * Called on the worker side
  * @internal
@@ -28,9 +26,6 @@ export class LanguageDetectionSimpleWorker extends EditorSimpleWorker {
 	private static readonly positiveConfidenceCorrectionBucket2 = 0.025;
 	private static readonly negativeConfidenceCorrection = 0.5;
 
-	private _regexpModel: RegexpModel | undefined;
-	private _regexpLoadFailed: boolean = false;
-
 	private _modelOperations: ModelOperations | undefined;
 	private _loadFailed: boolean = false;
 
@@ -63,19 +58,8 @@ export class LanguageDetectionSimpleWorker extends EditorSimpleWorker {
 			return undefined;
 		};
 
-		const historicalResolver = async () => this.runRegexpModel(documentTextSample, langBiases ?? {}, supportedLangs);
-
-		if (preferHistory) {
-			const history = await historicalResolver();
-			if (history) { return history; }
-			const neural = await neuralResolver();
-			if (neural) { return neural; }
-		} else {
-			const neural = await neuralResolver();
-			if (neural) { return neural; }
-			const history = await historicalResolver();
-			if (history) { return history; }
-		}
+		const neural = await neuralResolver();
+		if (neural) { return neural; }
 
 		return undefined;
 	}
@@ -94,50 +78,11 @@ export class LanguageDetectionSimpleWorker extends EditorSimpleWorker {
 		return content;
 	}
 
-	private async getRegexpModel(): Promise<RegexpModel | undefined> {
-		if (this._regexpLoadFailed) {
-			return;
-		}
-		if (this._regexpModel) {
-			return this._regexpModel;
-		}
-		const uri: string = await this._host.fhr('getRegexpModelUri', []);
-		try {
-			this._regexpModel = await import(uri) as RegexpModel;
-			return this._regexpModel;
-		} catch (e) {
-			this._regexpLoadFailed = true;
-			// console.warn('error loading language detection model', e);
-			return;
-		}
-	}
-
-	private async runRegexpModel(content: string, langBiases: Record<string, number>, supportedLangs?: string[]): Promise<string | undefined> {
-		const regexpModel = await this.getRegexpModel();
-		if (!regexpModel) { return; }
-
-		if (supportedLangs?.length) {
-			// When using supportedLangs, normally computed biases are too extreme. Just use a "bitmask" of sorts.
-			for (const lang of Object.keys(langBiases)) {
-				if (supportedLangs.includes(lang)) {
-					langBiases[lang] = 1;
-				} else {
-					langBiases[lang] = 0;
-				}
-			}
-		}
-
-		const detected = regexpModel.detect(content, langBiases, supportedLangs);
-		return detected;
-	}
-
 	private async getModelOperations(): Promise<ModelOperations> {
 		if (this._modelOperations) {
 			return this._modelOperations;
 		}
 
-		const uri: string = await this._host.fhr('getIndexJsUri', []);
-		const { ModelOperations } = await import(uri) as typeof import('@vscode/vscode-languagedetection');
 		this._modelOperations = new ModelOperations({
 			modelJsonLoaderFunc: async () => {
 				const response = await fetch(await this._host.fhr('getModelJsonUri', []));
-- 
2.34.1

