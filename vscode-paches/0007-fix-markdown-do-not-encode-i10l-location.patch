From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 16:46:45 +0100
Subject: [PATCH] fix(markdown): do not encode i10l location

---
 .../css-language-features/client/src/browser/cssClientMain.ts   | 2 +-
 .../html-language-features/client/src/browser/htmlClientMain.ts | 2 +-
 .../json-language-features/client/src/browser/jsonClientMain.ts | 2 +-
 extensions/markdown-language-features/src/extension.browser.ts  | 2 +-
 4 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/extensions/css-language-features/client/src/browser/cssClientMain.ts b/extensions/css-language-features/client/src/browser/cssClientMain.ts
index 6522c786389..ad53b9b350a 100644
--- a/extensions/css-language-features/client/src/browser/cssClientMain.ts
+++ b/extensions/css-language-features/client/src/browser/cssClientMain.ts
@@ -22,7 +22,7 @@ export async function activate(context: ExtensionContext) {
 	const serverMain = Uri.joinPath(context.extensionUri, 'server/dist/browser/cssServerMain.js');
 	try {
 		const worker = new Worker(serverMain.toString());
-		worker.postMessage({ i10lLocation: l10n.uri?.toString(false) ?? '' });
+		worker.postMessage({ i10lLocation: l10n.uri?.toString(true) ?? '' });
 
 		const newLanguageClient: LanguageClientConstructor = (id: string, name: string, clientOptions: LanguageClientOptions) => {
 			return new LanguageClient(id, name, clientOptions, worker);
diff --git a/extensions/html-language-features/client/src/browser/htmlClientMain.ts b/extensions/html-language-features/client/src/browser/htmlClientMain.ts
index 3f10e6d131f..350d27322db 100644
--- a/extensions/html-language-features/client/src/browser/htmlClientMain.ts
+++ b/extensions/html-language-features/client/src/browser/htmlClientMain.ts
@@ -22,7 +22,7 @@ export async function activate(context: ExtensionContext) {
 	const serverMain = Uri.joinPath(context.extensionUri, 'server/dist/browser/htmlServerMain.js');
 	try {
 		const worker = new Worker(serverMain.toString());
-		worker.postMessage({ i10lLocation: l10n.uri?.toString(false) ?? '' });
+		worker.postMessage({ i10lLocation: l10n.uri?.toString(true) ?? '' });
 
 		const newLanguageClient: LanguageClientConstructor = (id: string, name: string, clientOptions: LanguageClientOptions) => {
 			return new LanguageClient(id, name, clientOptions, worker);
diff --git a/extensions/json-language-features/client/src/browser/jsonClientMain.ts b/extensions/json-language-features/client/src/browser/jsonClientMain.ts
index f78f494d727..2def35ef026 100644
--- a/extensions/json-language-features/client/src/browser/jsonClientMain.ts
+++ b/extensions/json-language-features/client/src/browser/jsonClientMain.ts
@@ -21,7 +21,7 @@ export async function activate(context: ExtensionContext) {
 	const serverMain = Uri.joinPath(context.extensionUri, 'server/dist/browser/jsonServerMain.js');
 	try {
 		const worker = new Worker(serverMain.toString());
-		worker.postMessage({ i10lLocation: l10n.uri?.toString(false) ?? '' });
+		worker.postMessage({ i10lLocation: l10n.uri?.toString(true) ?? '' });
 
 		const newLanguageClient: LanguageClientConstructor = (id: string, name: string, clientOptions: LanguageClientOptions) => {
 			return new LanguageClient(id, name, clientOptions, worker);
diff --git a/extensions/markdown-language-features/src/extension.browser.ts b/extensions/markdown-language-features/src/extension.browser.ts
index 30639672490..2095905a4d8 100644
--- a/extensions/markdown-language-features/src/extension.browser.ts
+++ b/extensions/markdown-language-features/src/extension.browser.ts
@@ -30,7 +30,7 @@ function startServer(context: vscode.ExtensionContext, parser: IMdParser): Promi
 	const serverMain = vscode.Uri.joinPath(context.extensionUri, 'server/dist/browser/workerMain.js');
 
 	const worker = new Worker(serverMain.toString());
-	worker.postMessage({ i10lLocation: vscode.l10n.uri?.toString() ?? '' });
+	worker.postMessage({ i10lLocation: vscode.l10n.uri?.toString(true) ?? '' });
 
 	return startClient((id: string, name: string, clientOptions: LanguageClientOptions) => {
 		return new LanguageClient(id, name, clientOptions, worker);
