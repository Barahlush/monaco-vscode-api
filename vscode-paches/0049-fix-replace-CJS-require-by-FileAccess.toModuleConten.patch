From 1b620e23dbdc07012f6e43998edd6cb4bbc7d058 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 18:22:25 +0100
Subject: [PATCH 49/58] fix: replace CJS require by FileAccess.toModuleContent

to make it work in ESM context
---
 .../browser/gettingStartedDetailsRenderer.ts   | 12 +++++-------
 .../common/walkThroughContentProvider.ts       | 18 +++++-------------
 2 files changed, 10 insertions(+), 20 deletions(-)

diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedDetailsRenderer.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedDetailsRenderer.ts
index 869f44526b4..296ac140860 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedDetailsRenderer.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedDetailsRenderer.ts
@@ -17,6 +17,7 @@ import { IFileService } from 'vs/platform/files/common/files';
 import { INotificationService } from 'vs/platform/notification/common/notification';
 import { ILanguageService } from 'vs/editor/common/languages/language';
 import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
+import { AppResourcePath, FileAccess } from 'vs/base/common/network';
 
 
 export class GettingStartedDetailsRenderer {
@@ -221,12 +222,9 @@ export class GettingStartedDetailsRenderer {
 		try {
 			const moduleId = JSON.parse(path.query).moduleId;
 			if (useModuleId && moduleId) {
-				const contents = await new Promise<string>(c => {
-					require([moduleId], content => {
-						c(content.default());
-					});
-				});
-				return contents;
+				const content = await FileAccess.toModuleContent<() => Promise<string>>(moduleId);
+
+				return content();
 			}
 		} catch { }
 
@@ -262,7 +260,7 @@ export class GettingStartedDetailsRenderer {
 }
 
 const transformUri = (src: string, base: URI) => {
-	const path = joinPath(base, src);
+	const path = FileAccess.asBrowserUri(joinPath(base, src).fsPath.slice(1) as AppResourcePath);
 	return asWebviewUri(path).toString(true);
 };
 
diff --git a/src/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts b/src/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts
index 24764f1e31a..e16d9f5afcd 100644
--- a/src/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts
+++ b/src/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts
@@ -10,13 +10,13 @@ import { ITextModel, DefaultEndOfLine, EndOfLinePreference, ITextBufferFactory }
 import { ILanguageService } from 'vs/editor/common/languages/language';
 import { IWorkbenchContribution } from 'vs/workbench/common/contributions';
 import { marked } from 'vs/base/common/marked/marked';
-import { Schemas } from 'vs/base/common/network';
+import { FileAccess, Schemas } from 'vs/base/common/network';
 import { Range } from 'vs/editor/common/core/range';
 import { createTextBufferFactory } from 'vs/editor/common/model/textModel';
 import { assertIsDefined } from 'vs/base/common/types';
-import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
+import { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
 
-export function requireToContent(instantiationService: IInstantiationService, resource: URI): Promise<string> {
+export async function requireToContent(instantiationService: IInstantiationService, resource: URI): Promise<string> {
 	if (!resource.query) {
 		throw new Error('Welcome: invalid resource');
 	}
@@ -26,17 +26,9 @@ export function requireToContent(instantiationService: IInstantiationService, re
 		throw new Error('Welcome: invalid resource');
 	}
 
-	const content: Promise<string> = new Promise<string>((resolve, reject) => {
-		require([query.moduleId], content => {
-			try {
-				resolve(instantiationService.invokeFunction(content.default));
-			} catch (err) {
-				reject(err);
-			}
-		});
-	});
+	const content = await FileAccess.toModuleContent<(accessor: ServicesAccessor) => Promise<string>>(query.moduleId);
 
-	return content;
+	return instantiationService.invokeFunction(content);
 }
 
 export class WalkThroughSnippetContentProvider implements ITextModelContentProvider, IWorkbenchContribution {
-- 
2.34.1

