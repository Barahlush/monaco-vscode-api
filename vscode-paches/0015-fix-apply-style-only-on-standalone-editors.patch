From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 17:13:49 +0100
Subject: [PATCH] fix: apply style only on standalone editors

---
 .../browser/config/editorConfiguration.ts     | 12 ++++++--
 .../widget/codeEditor/codeEditorWidget.ts     | 12 ++++++--
 .../widget/diffEditor/diffEditorWidget.ts     |  8 ++++++
 .../standalone/browser/standalone-tokens.css  | 28 +++++++++----------
 .../browser/standaloneCodeEditor.ts           |  4 +--
 .../test/browser/config/testConfiguration.ts  |  2 +-
 src/vs/editor/test/browser/testCodeEditor.ts  |  2 +-
 7 files changed, 44 insertions(+), 24 deletions(-)

diff --git a/src/vs/editor/browser/config/editorConfiguration.ts b/src/vs/editor/browser/config/editorConfiguration.ts
index 06e8339cbc7..799c2f81cd0 100644
--- a/src/vs/editor/browser/config/editorConfiguration.ts
+++ b/src/vs/editor/browser/config/editorConfiguration.ts
@@ -43,6 +43,7 @@ export class EditorConfiguration extends Disposable implements IEditorConfigurat
 	public readonly onDidChangeFast: Event<ConfigurationChangedEvent> = this._onDidChangeFast.event;
 
 	public readonly isSimpleWidget: boolean;
+	public readonly isStandaloneEditor: boolean;
 	private readonly _containerObserver: ElementSizeObserver;
 
 	private _isDominatedByLongLines: boolean = false;
@@ -68,12 +69,14 @@ export class EditorConfiguration extends Disposable implements IEditorConfigurat
 
 	constructor(
 		isSimpleWidget: boolean,
+		isStandaloneEditor: boolean,
 		options: Readonly<IEditorConstructionOptions>,
 		container: HTMLElement | null,
 		@IAccessibilityService private readonly _accessibilityService: IAccessibilityService
 	) {
 		super();
 		this.isSimpleWidget = isSimpleWidget;
+		this.isStandaloneEditor = isStandaloneEditor;
 		this._containerObserver = this._register(new ElementSizeObserver(container, options.dimension));
 		this._targetWindowId = getWindow(container).vscodeWindowId;
 
@@ -130,7 +133,7 @@ export class EditorConfiguration extends Disposable implements IEditorConfigurat
 
 	protected _readEnvConfiguration(): IEnvConfiguration {
 		return {
-			extraEditorClassName: getExtraEditorClassName(),
+			extraEditorClassName: getExtraEditorClassName(this.isStandaloneEditor),
 			outerWidth: this._containerObserver.getWidth(),
 			outerHeight: this._containerObserver.getHeight(),
 			emptySelectionClipboard: browser.isWebKit || browser.isFirefox,
@@ -218,7 +221,7 @@ function digitCount(n: number): number {
 	return r ? r : 1;
 }
 
-function getExtraEditorClassName(): string {
+function getExtraEditorClassName(isStandaloneEditor: boolean): string {
 	let extra = '';
 	if (!browser.isSafari && !browser.isWebkitWebView) {
 		// Use user-select: none in all browsers except Safari and native macOS WebView
@@ -232,6 +235,9 @@ function getExtraEditorClassName(): string {
 	if (platform.isMacintosh) {
 		extra += 'mac ';
 	}
+	if (isStandaloneEditor) {
+		extra += 'standalone ';
+	}
 	return extra;
 }
 
@@ -273,7 +279,7 @@ export class ComputedEditorOptions implements IComputedEditorOptions {
 	}
 }
 
-class EditorOptionsUtil {
+export class EditorOptionsUtil {
 
 	public static validateOptions(options: IEditorOptions): ValidatedEditorOptions {
 		const result = new ValidatedEditorOptions();
diff --git a/src/vs/editor/browser/widget/codeEditor/codeEditorWidget.ts b/src/vs/editor/browser/widget/codeEditor/codeEditorWidget.ts
index 108aa52fa8a..dd294d50a2e 100644
--- a/src/vs/editor/browser/widget/codeEditor/codeEditorWidget.ts
+++ b/src/vs/editor/browser/widget/codeEditor/codeEditorWidget.ts
@@ -254,7 +254,7 @@ export class CodeEditorWidget extends Disposable implements editorBrowser.ICodeE
 		this._decorationTypeSubtypes = {};
 		this._telemetryData = codeEditorWidgetOptions.telemetryData;
 
-		this._configuration = this._register(this._createConfiguration(codeEditorWidgetOptions.isSimpleWidget || false, options, accessibilityService));
+		this._configuration = this._register(this._createConfiguration(codeEditorWidgetOptions.isSimpleWidget || false, codeEditorWidgetOptions.isStandaloneEditor || false, options, accessibilityService));
 		this._register(this._configuration.onDidChange((e) => {
 			this._onDidChangeConfiguration.fire(e);
 
@@ -362,8 +362,8 @@ export class CodeEditorWidget extends Disposable implements editorBrowser.ICodeE
 		this._modelData?.view.writeScreenReaderContent(reason);
 	}
 
-	protected _createConfiguration(isSimpleWidget: boolean, options: Readonly<IEditorConstructionOptions>, accessibilityService: IAccessibilityService): EditorConfiguration {
-		return new EditorConfiguration(isSimpleWidget, options, this._domElement, accessibilityService);
+	protected _createConfiguration(isSimpleWidget: boolean, isStandaloneEditor: boolean, options: Readonly<IEditorConstructionOptions>, accessibilityService: IAccessibilityService): EditorConfiguration {
+		return new EditorConfiguration(isSimpleWidget, isStandaloneEditor, options, this._domElement, accessibilityService);
 	}
 
 	public getId(): string {
@@ -1896,6 +1896,12 @@ export interface ICodeEditorWidgetOptions {
 	 */
 	isSimpleWidget?: boolean;
 
+	/**
+	 * Is this a standalone editor
+	 * Defaults to false.
+	 */
+	isStandaloneEditor?: boolean;
+
 	/**
 	 * Contributions to instantiate.
 	 * When provided, only the contributions included will be instantiated.
diff --git a/src/vs/editor/browser/widget/diffEditor/diffEditorWidget.ts b/src/vs/editor/browser/widget/diffEditor/diffEditorWidget.ts
index 7e5ac2ea408..5bcb6f60fab 100644
--- a/src/vs/editor/browser/widget/diffEditor/diffEditorWidget.ts
+++ b/src/vs/editor/browser/widget/diffEditor/diffEditorWidget.ts
@@ -50,6 +50,12 @@ import { DiffEditorGutter } from 'vs/editor/browser/widget/diffEditor/features/g
 export interface IDiffCodeEditorWidgetOptions {
 	originalEditor?: ICodeEditorWidgetOptions;
 	modifiedEditor?: ICodeEditorWidgetOptions;
+
+	/**
+	 * Is this a standalone editor
+	 * Defaults to false.
+	 */
+	isStandaloneEditor?: boolean;
 }
 
 export class DiffEditorWidget extends DelegatingEditor implements IDiffEditor {
@@ -111,6 +117,8 @@ export class DiffEditorWidget extends DelegatingEditor implements IDiffEditor {
 
 		this._contextKeyService.createKey('isInDiffEditor', true);
 
+		this.elements.root.classList.toggle('standalone', codeEditorWidgetOptions.isStandaloneEditor || false);
+
 		this._domElement.appendChild(this.elements.root);
 		this._register(toDisposable(() => this._domElement.removeChild(this.elements.root)));
 
diff --git a/src/vs/editor/standalone/browser/standalone-tokens.css b/src/vs/editor/standalone/browser/standalone-tokens.css
index 1fc85078f9e..c74aca00541 100644
--- a/src/vs/editor/standalone/browser/standalone-tokens.css
+++ b/src/vs/editor/standalone/browser/standalone-tokens.css
@@ -5,7 +5,7 @@
 
 
 /* Default standalone editor fonts */
-.monaco-editor {
+.monaco-editor.standalone {
 	font-family: -apple-system, BlinkMacSystemFont, "Segoe WPC", "Segoe UI", "HelveticaNeue-Light", system-ui, "Ubuntu", "Droid Sans", sans-serif;
 	--monaco-monospace-font: "SF Mono", Monaco, Menlo, Consolas, "Ubuntu Mono", "Liberation Mono", "DejaVu Sans Mono", "Courier New", monospace;
 }
@@ -14,9 +14,9 @@
 	stroke-width: 1.2px;
 }
 
-.monaco-editor.vs-dark .monaco-menu .monaco-action-bar.vertical .action-menu-item:focus .action-label,
-.monaco-editor.hc-black .monaco-menu .monaco-action-bar.vertical .action-menu-item:focus .action-label,
-.monaco-editor.hc-light .monaco-menu .monaco-action-bar.vertical .action-menu-item:focus .action-label {
+.monaco-editor.standalone.vs-dark .monaco-menu .monaco-action-bar.vertical .action-menu-item:focus .action-label,
+.monaco-editor.standalone.hc-black .monaco-menu .monaco-action-bar.vertical .action-menu-item:focus .action-label,
+.monaco-editor.standalone.hc-light .monaco-menu .monaco-action-bar.vertical .action-menu-item:focus .action-label {
 	stroke-width: 1.2px;
 }
 
@@ -37,16 +37,16 @@
 	clip-path: inset(50%);
 }
 
-.monaco-editor, .monaco-diff-editor .synthetic-focus,
-.monaco-editor, .monaco-diff-editor [tabindex="0"]:focus,
-.monaco-editor, .monaco-diff-editor [tabindex="-1"]:focus,
-.monaco-editor, .monaco-diff-editor button:focus,
-.monaco-editor, .monaco-diff-editor input[type=button]:focus,
-.monaco-editor, .monaco-diff-editor input[type=checkbox]:focus,
-.monaco-editor, .monaco-diff-editor input[type=search]:focus,
-.monaco-editor, .monaco-diff-editor input[type=text]:focus,
-.monaco-editor, .monaco-diff-editor select:focus,
-.monaco-editor, .monaco-diff-editor textarea:focus {
+.monaco-editor.standalone, .monaco-diff-editor.standalone .synthetic-focus,
+.monaco-editor.standalone, .monaco-diff-editor.standalone [tabindex="0"]:focus,
+.monaco-editor.standalone, .monaco-diff-editor.standalone [tabindex="-1"]:focus,
+.monaco-editor.standalone, .monaco-diff-editor.standalone button:focus,
+.monaco-editor.standalone, .monaco-diff-editor.standalone input[type=button]:focus,
+.monaco-editor.standalone, .monaco-diff-editor.standalone input[type=checkbox]:focus,
+.monaco-editor.standalone, .monaco-diff-editor.standalone input[type=search]:focus,
+.monaco-editor.standalone, .monaco-diff-editor.standalone input[type=text]:focus,
+.monaco-editor.standalone, .monaco-diff-editor.standalone select:focus,
+.monaco-editor.standalone, .monaco-diff-editor.standalone textarea:focus {
 	outline-width: 1px;
 	outline-style: solid;
 	outline-offset: -1px;
diff --git a/src/vs/editor/standalone/browser/standaloneCodeEditor.ts b/src/vs/editor/standalone/browser/standaloneCodeEditor.ts
index c80bdf63686..37f7bd893ba 100644
--- a/src/vs/editor/standalone/browser/standaloneCodeEditor.ts
+++ b/src/vs/editor/standalone/browser/standaloneCodeEditor.ts
@@ -282,7 +282,7 @@ export class StandaloneCodeEditor extends CodeEditorWidget implements IStandalon
 		const options = { ..._options };
 		options.ariaLabel = options.ariaLabel || StandaloneCodeEditorNLS.editorViewAccessibleLabel;
 		options.ariaLabel = options.ariaLabel + ';' + (StandaloneCodeEditorNLS.accessibilityHelpMessage);
-		super(domElement, options, {}, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService);
+		super(domElement, options, { isStandaloneEditor: true }, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService);
 
 		if (keybindingService instanceof StandaloneKeybindingService) {
 			this._standaloneKeybindingService = keybindingService;
@@ -518,7 +518,7 @@ export class StandaloneDiffEditor2 extends DiffEditorWidget implements IStandalo
 		super(
 			domElement,
 			options,
-			{},
+			{ isStandaloneEditor: true },
 			contextKeyService,
 			instantiationService,
 			codeEditorService,
diff --git a/src/vs/editor/test/browser/config/testConfiguration.ts b/src/vs/editor/test/browser/config/testConfiguration.ts
index b5d42908ded..3815f8fb823 100644
--- a/src/vs/editor/test/browser/config/testConfiguration.ts
+++ b/src/vs/editor/test/browser/config/testConfiguration.ts
@@ -13,7 +13,7 @@ import { TestAccessibilityService } from 'vs/platform/accessibility/test/common/
 export class TestConfiguration extends EditorConfiguration {
 
 	constructor(opts: Readonly<TestCodeEditorCreationOptions>) {
-		super(false, opts, null, new TestAccessibilityService());
+		super(false, false, opts, null, new TestAccessibilityService());
 	}
 
 	protected override _readEnvConfiguration(): IEnvConfiguration {
diff --git a/src/vs/editor/test/browser/testCodeEditor.ts b/src/vs/editor/test/browser/testCodeEditor.ts
index c0a4b9d1cf3..f260372b1fc 100644
--- a/src/vs/editor/test/browser/testCodeEditor.ts
+++ b/src/vs/editor/test/browser/testCodeEditor.ts
@@ -68,7 +68,7 @@ export interface ITestCodeEditor extends IActiveCodeEditor {
 export class TestCodeEditor extends CodeEditorWidget implements ICodeEditor {
 
 	//#region testing overrides
-	protected override _createConfiguration(isSimpleWidget: boolean, options: Readonly<TestCodeEditorCreationOptions>): EditorConfiguration {
+	protected override _createConfiguration(isSimpleWidget: boolean, isStandaloneEditor: boolean, options: Readonly<TestCodeEditorCreationOptions>): EditorConfiguration {
 		return new TestConfiguration(options);
 	}
 	protected override _createView(viewModel: ViewModel): [View, boolean] {
-- 
2.34.1

