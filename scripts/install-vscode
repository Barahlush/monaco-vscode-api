#!/bin/bash
set -e

vscodeRef=$(cat package.json | jq -r '.config.vscode.ref')

output_directory="`pwd`/vscode"
loc_output_directory="`pwd`/vscode-loc"
extension_output_directory="`pwd`/vscode-default-extensions"
extension_node_output_directory="`pwd`/vscode-default-extensions-node"
patch_directory="`pwd`/vscode-paches"
version_info=$output_directory/version.info

if [[ -e $version_info && $(cat $version_info) == $vscodeRef ]]; then
    echo "vscode version $vscodeRef is already installed. Aborting..."
    exit 0
else
    echo "vscode version $vscodeRef is not available. Installing..."
fi

rm -rf $output_directory

build_directory=`mktemp -d`
echo "Downloading vscode $vscodeRef in $build_directory..."

curl -L --max-redirs 5 https://github.com/Microsoft/vscode/tarball/$vscodeRef | tar -xz -C $build_directory --strip-components=1
vscodeVersion=$(cat "$build_directory/package.json" | jq -r '.["version"]')
cat <<< "$(jq ".config.vscode.version = \"$vscodeVersion\"" package.json)" > package.json

cd $build_directory

echo "Installing vscode dependencies..."
yarn config set ignore-engines
yarn install --ignore-scripts
yarn postinstall || true

echo "Patching vscode..."
find "$patch_directory" -type f -name '*.patch' -print0 | sort -z | xargs -t -0 -n 1 patch -p1 -i

echo "Installing build dependencies"
cd build
yarn install --ignore-engines
cd ..

## Change shake level from ClassMembers to Files to speed up build
sed -i'' -e 's/shakeLevel: 2/shakeLevel: 0/g' build/gulpfile.editor.js
## build editor just to get the editor.api.d.ts file compiled
yarn gulp editor-distro

# build and copy default extensions
# for server
BUILD_SOURCEVERSION=$vscodeRef NODE_OPTIONS=--max-old-space-size=8192 yarn extensions-ci
rm -rf $extension_node_output_directory
cp -R .build/extensions "$extension_node_output_directory"

# for web
BUILD_SOURCEVERSION=$vscodeRef NODE_OPTIONS=--max-old-space-size=8192 yarn gulp compile-web-extensions-build
rm -rf $extension_output_directory
cp -R .build/web/extensions "$extension_output_directory"

# transform to relative imports, replace ESM comments and vs/css! imports
cat << EOF | node -
	require('./build/lib/standalone').createESMSourcesAndResources2({
		srcFolder: './src',
		outFolder: './src',
		outResourcesFolder: './resources',
		ignores: [
			'inlineEntryPoint:0.ts',
			'inlineEntryPoint:1.ts',
			'vs/loader.js',
			'vs/base/worker/workerMain.ts',
		],
		renames: {
		}
	});
EOF
cd resources
rsync -R $(find . -name \*.js) ../src/
cd ..

cd src

# Remove useless files
rm -rf `find . -name '*.test.ts' -o -name 'test' -o -name 'electron-browser'`
rm -rf vs/code

mkdir -p $output_directory
echo $vscodeRef > $version_info

echo "Building vscode..."
NODE_OPTIONS=--max-old-space-size=8192 npx tsc --declaration --importHelpers --module es2020 --preserveConstEnums --outDir "$output_directory"
# Copy files that are already built and assets
find ./ \( -name '*.js' -o -name '*.d.ts' -o -name '*.ttf' -o -name '*.css' -o -name '*.mp3' -o -name '*.svg' -o -name '*.png' -o -name '*.html' -o -name '*.sh' -o -name '*.zsh' -o -name '*.ps1' \) -exec rsync -R \{\} "$output_directory/src" \;

cd ..
# Copy editor types
cp out-monaco-editor-core/esm/vs/editor/editor.api.d.ts $output_directory/src/vs/editor/editor.api.d.ts

echo "Downloading vscode-loc"
rm -rf $loc_output_directory
mkdir -p $loc_output_directory
curl -L --max-redirs 5 https://github.com/microsoft/vscode-loc/archive/refs/heads/main.tar.gz | tar -xz -C $loc_output_directory --strip-components=2 vscode-loc-main/i18n


echo "Cleaning..."
rm -rf $build_directory
